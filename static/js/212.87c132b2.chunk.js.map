{"version":3,"file":"static/js/212.87c132b2.chunk.js","mappings":"mTAEAA,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAAS,oCAGJ,IAAMC,EAAgB,mCAAG,sGACPF,EAAAA,EAAAA,IAAA,qBADO,uBACtBG,EADsB,EACtBA,KADsB,kBAGvBA,GAHuB,2CAAH,qDAMhBC,EAAW,mCAAG,WAAMC,GAAN,yFACFL,EAAAA,EAAAA,IAAA,0EACuCK,IAFrC,uBACjBF,EADiB,EACjBA,KADiB,kBAIlBA,GAJkB,2CAAH,sDAOXG,EAAe,mCAAG,WAAMC,GAAN,yFACNP,EAAAA,EAAAA,IAAA,iBAAoBO,EAApB,oBADM,uBACrBJ,EADqB,EACrBA,KADqB,kBAGtBA,GAHsB,2CAAH,sDAMfK,EAAO,mCAAG,WAAMD,GAAN,yFACEP,EAAAA,EAAAA,IAAA,iBAAoBO,EAApB,4BADF,uBACbJ,EADa,EACbA,KADa,kBAGdA,GAHc,2CAAH,sDAMPM,EAAU,mCAAG,WAAMF,GAAN,yFACDP,EAAAA,EAAAA,IAAA,iBACXO,EADW,oCADC,uBAChBJ,EADgB,EAChBA,KADgB,kBAKjBA,GALiB,2CAAH,qD,iLC9BVO,EAAOC,EAAAA,EAAAA,GAAH,uKAUJC,EAAOD,EAAAA,EAAAA,GAAH,qJAQJE,EAAQF,EAAAA,EAAAA,GAAH,qLAWLG,EAAOH,EAAAA,EAAAA,EAAH,8M,SC7BJI,EAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACzB,SAACN,EAAD,UACGM,GACCA,EAAQC,KAAI,gBAAGV,EAAH,EAAGA,GAAIW,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACV,UAACP,EAAD,YACE,UAACC,EAAD,sBAAgBK,MAChB,SAACJ,EAAD,UAAOK,MAFEZ,EADD,KAHS,ECuC3B,EAnCgB,WACd,IAAQa,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAON,EAAP,KAAgBO,EAAhB,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAA8BH,EAAAA,EAAAA,UAAS,MAAvC,eAAOI,EAAP,KAAgBC,EAAhB,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACR,GAAKR,EAAL,CACA,IAAMS,EAAW,mCAAG,gHAEUpB,EAAAA,EAAAA,IAAWW,GAFrB,gBAGO,KADfU,EAFQ,EAERA,SACIC,QACVJ,GAAW,GAEbJ,EAAWO,GANK,gDAQhBL,EAAS,KAAMO,SARC,yDAAH,qDAWjBH,GAZoB,CAarB,GAAE,CAACT,KAEF,gCACGM,IACC,SAACO,EAAA,EAAD,CAAUC,SAAQ,6CAEnBV,IACC,SAACS,EAAA,EAAD,CAAUC,SAAQ,uDAGlBR,IAAYF,IAAS,SAACT,EAAD,CAAaC,QAASA,MAGlD,C","sources":["Service/ApiGet.jsx","components/Reviews/ListReviews.styled.jsx","components/Reviews/ListReviews.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: '1174e437242bb46ea8831e578adaacd1',\n};\n\nexport const movieTrendingGet = async () => {\n  const { data } = await axios.get(`/trending/all/day`);\n\n  return data;\n};\n\nexport const movieSearch = async searchQuery => {\n  const { data } = await axios.get(`\n/search/movie?language=en-US&page=1&include_adult=false&query=${searchQuery}`);\n\n  return data;\n};\n\nexport const movieDetailsGet = async id => {\n  const { data } = await axios.get(`/movie/${id}?language=en-US`);\n\n  return data;\n};\n\nexport const castGet = async id => {\n  const { data } = await axios.get(`/movie/${id}/credits?language=en-US`);\n\n  return data;\n};\n\nexport const reviewsGet = async id => {\n  const { data } = await axios.get(\n    `/movie/${id}/reviews?language=en-US&page=1 `\n  );\n\n  return data;\n};\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  align-items: center;\n\n  max-width: calc(100vw - 48px);\n\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\nexport const Item = styled.li`\n  margin: 15px;\n  transition: transform 350ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    transform: scale(1.05);\n  }\n`;\n\nexport const Title = styled.h2`\n  padding: 15px;\n\n  font-size: 18px;\n  font-weight: 500;\n  transition: color 350ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    color: #99a4f7;\n  }\n`;\n\nexport const Text = styled.p`\n  padding: 10px 30px;\n\n  font-size: 14px;\n  font-weight: 400;\n  transition: all 350ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    color: #99a4f7;\n    font-size: 16px;\n  }\n`;\n","import { List, Item, Title, Text } from './ListReviews.styled';\n\nexport const ListReviews = ({ reviews }) => (\n  <List>\n    {reviews &&\n      reviews.map(({ id, author, content }) => (\n        <Item key={id}>\n          <Title>Author: {author}</Title>\n          <Text>{content}</Text>\n        </Item>\n      ))}\n  </List>\n);\n","import { NotFound } from 'components/NotFound/NotFound';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { reviewsGet } from 'Service/ApiGet';\nimport { ListReviews } from './ListReviews';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [error, setError] = useState(null);\n  const [isEmpty, setIsEmpty] = useState(null);\n\n  useEffect(() => {\n    if (!movieId) return;\n    const ReviewsList = async () => {\n      try {\n        const { results } = await reviewsGet(movieId);\n        if (results.length === 0) {\n          setIsEmpty(true);\n        }\n        setReviews(results);\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n    ReviewsList();\n  }, [movieId]);\n  return (\n    <>\n      {isEmpty && (\n        <NotFound children={`We don't have any reviews for this movie`} />\n      )}\n      {error && (\n        <NotFound children={`Something went wrong Try again later.ðŸ˜­`} />\n      )}\n\n      {!isEmpty && !error && <ListReviews reviews={reviews} />}\n    </>\n  );\n};\n\nexport default Reviews;\n"],"names":["axios","api_key","movieTrendingGet","data","movieSearch","searchQuery","movieDetailsGet","id","castGet","reviewsGet","List","styled","Item","Title","Text","ListReviews","reviews","map","author","content","movieId","useParams","useState","setReviews","error","setError","isEmpty","setIsEmpty","useEffect","ReviewsList","results","length","message","NotFound","children"],"sourceRoot":""}